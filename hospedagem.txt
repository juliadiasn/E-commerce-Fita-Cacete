render

import bcrypt from 'bcrypt';
import tbUser from '../models/userModel.mjs'

const userController = {};

// Função para registrar um novo usuário
userController.register = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // Verifica se o usuário já existe
    const existingUser = await tbUser.findOne({ where: { email } });

    if (existingUser) {
      return res.status(409).json({ message: 'Usuário já cadastrado' });
    }

    // Criptografa a senha
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Cria um novo usuário
    const newUser = await tbUser.create({
      name,
      email,
      password: hashedPassword,
    });

    res.status(201).json({ message: 'Usuário registrado com sucesso!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Erro ao registrar usuário.' });
  }
};

// Função para realizar login
userController.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Encontra o usuário pelo email
    const user = await tbUser.findOne({ where: { email } });

    if (!user) {
      return res.status(404).json({ message: 'Usuário não encontrado.' });
    }

    // Compara a senha fornecida com a senha armazenada
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Senha inválida.' });
    }

    // Se a senha for válida, você pode gerar um token JWT aqui
    // ...

    res.status(200).json({ message: 'Login realizado com sucesso!' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Erro ao realizar login.' });
  }
};

export default userController;
